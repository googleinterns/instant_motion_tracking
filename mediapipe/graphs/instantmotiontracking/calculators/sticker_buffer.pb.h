// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sticker_buffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sticker_5fbuffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sticker_5fbuffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sticker_5fbuffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sticker_5fbuffer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sticker_5fbuffer_2eproto;
namespace instantmotiontracking {
class Sticker;
class StickerDefaultTypeInternal;
extern StickerDefaultTypeInternal _Sticker_default_instance_;
class StickerRoll;
class StickerRollDefaultTypeInternal;
extern StickerRollDefaultTypeInternal _StickerRoll_default_instance_;
}  // namespace instantmotiontracking
PROTOBUF_NAMESPACE_OPEN
template<> ::instantmotiontracking::Sticker* Arena::CreateMaybeMessage<::instantmotiontracking::Sticker>(Arena*);
template<> ::instantmotiontracking::StickerRoll* Arena::CreateMaybeMessage<::instantmotiontracking::StickerRoll>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace instantmotiontracking {

// ===================================================================

class Sticker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instantmotiontracking.Sticker) */ {
 public:
  Sticker();
  virtual ~Sticker();

  Sticker(const Sticker& from);
  Sticker(Sticker&& from) noexcept
    : Sticker() {
    *this = ::std::move(from);
  }

  inline Sticker& operator=(const Sticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sticker& operator=(Sticker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sticker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sticker* internal_default_instance() {
    return reinterpret_cast<const Sticker*>(
               &_Sticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sticker& a, Sticker& b) {
    a.Swap(&b);
  }
  inline void Swap(Sticker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sticker* New() const final {
    return CreateMaybeMessage<Sticker>(nullptr);
  }

  Sticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sticker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sticker& from);
  void MergeFrom(const Sticker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sticker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instantmotiontracking.Sticker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sticker_5fbuffer_2eproto);
    return ::descriptor_table_sticker_5fbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kRotationFieldNumber = 4,
    kScaleFieldNumber = 5,
    kRenderIDFieldNumber = 6,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // required float scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // required int32 renderID = 6;
  bool has_renderid() const;
  private:
  bool _internal_has_renderid() const;
  public:
  void clear_renderid();
  ::PROTOBUF_NAMESPACE_ID::int32 renderid() const;
  void set_renderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_renderid() const;
  void _internal_set_renderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:instantmotiontracking.Sticker)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float rotation_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 renderid_;
  friend struct ::TableStruct_sticker_5fbuffer_2eproto;
};
// -------------------------------------------------------------------

class StickerRoll :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instantmotiontracking.StickerRoll) */ {
 public:
  StickerRoll();
  virtual ~StickerRoll();

  StickerRoll(const StickerRoll& from);
  StickerRoll(StickerRoll&& from) noexcept
    : StickerRoll() {
    *this = ::std::move(from);
  }

  inline StickerRoll& operator=(const StickerRoll& from) {
    CopyFrom(from);
    return *this;
  }
  inline StickerRoll& operator=(StickerRoll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StickerRoll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StickerRoll* internal_default_instance() {
    return reinterpret_cast<const StickerRoll*>(
               &_StickerRoll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StickerRoll& a, StickerRoll& b) {
    a.Swap(&b);
  }
  inline void Swap(StickerRoll* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StickerRoll* New() const final {
    return CreateMaybeMessage<StickerRoll>(nullptr);
  }

  StickerRoll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StickerRoll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StickerRoll& from);
  void MergeFrom(const StickerRoll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StickerRoll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instantmotiontracking.StickerRoll";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sticker_5fbuffer_2eproto);
    return ::descriptor_table_sticker_5fbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStickerFieldNumber = 1,
  };
  // repeated .instantmotiontracking.Sticker sticker = 1;
  int sticker_size() const;
  private:
  int _internal_sticker_size() const;
  public:
  void clear_sticker();
  ::instantmotiontracking::Sticker* mutable_sticker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instantmotiontracking::Sticker >*
      mutable_sticker();
  private:
  const ::instantmotiontracking::Sticker& _internal_sticker(int index) const;
  ::instantmotiontracking::Sticker* _internal_add_sticker();
  public:
  const ::instantmotiontracking::Sticker& sticker(int index) const;
  ::instantmotiontracking::Sticker* add_sticker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instantmotiontracking::Sticker >&
      sticker() const;

  // @@protoc_insertion_point(class_scope:instantmotiontracking.StickerRoll)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instantmotiontracking::Sticker > sticker_;
  friend struct ::TableStruct_sticker_5fbuffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sticker

// required int32 id = 1;
inline bool Sticker::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sticker::has_id() const {
  return _internal_has_id();
}
inline void Sticker::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sticker::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sticker::id() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.id)
  return _internal_id();
}
inline void Sticker::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Sticker::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.id)
}

// required float x = 2;
inline bool Sticker::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sticker::has_x() const {
  return _internal_has_x();
}
inline void Sticker::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Sticker::_internal_x() const {
  return x_;
}
inline float Sticker::x() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.x)
  return _internal_x();
}
inline void Sticker::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Sticker::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.x)
}

// required float y = 3;
inline bool Sticker::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sticker::has_y() const {
  return _internal_has_y();
}
inline void Sticker::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Sticker::_internal_y() const {
  return y_;
}
inline float Sticker::y() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.y)
  return _internal_y();
}
inline void Sticker::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void Sticker::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.y)
}

// required float rotation = 4;
inline bool Sticker::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sticker::has_rotation() const {
  return _internal_has_rotation();
}
inline void Sticker::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Sticker::_internal_rotation() const {
  return rotation_;
}
inline float Sticker::rotation() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.rotation)
  return _internal_rotation();
}
inline void Sticker::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000008u;
  rotation_ = value;
}
inline void Sticker::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.rotation)
}

// required float scale = 5;
inline bool Sticker::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Sticker::has_scale() const {
  return _internal_has_scale();
}
inline void Sticker::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Sticker::_internal_scale() const {
  return scale_;
}
inline float Sticker::scale() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.scale)
  return _internal_scale();
}
inline void Sticker::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  scale_ = value;
}
inline void Sticker::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.scale)
}

// required int32 renderID = 6;
inline bool Sticker::_internal_has_renderid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Sticker::has_renderid() const {
  return _internal_has_renderid();
}
inline void Sticker::clear_renderid() {
  renderid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sticker::_internal_renderid() const {
  return renderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sticker::renderid() const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.Sticker.renderID)
  return _internal_renderid();
}
inline void Sticker::_internal_set_renderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  renderid_ = value;
}
inline void Sticker::set_renderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_renderid(value);
  // @@protoc_insertion_point(field_set:instantmotiontracking.Sticker.renderID)
}

// -------------------------------------------------------------------

// StickerRoll

// repeated .instantmotiontracking.Sticker sticker = 1;
inline int StickerRoll::_internal_sticker_size() const {
  return sticker_.size();
}
inline int StickerRoll::sticker_size() const {
  return _internal_sticker_size();
}
inline void StickerRoll::clear_sticker() {
  sticker_.Clear();
}
inline ::instantmotiontracking::Sticker* StickerRoll::mutable_sticker(int index) {
  // @@protoc_insertion_point(field_mutable:instantmotiontracking.StickerRoll.sticker)
  return sticker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instantmotiontracking::Sticker >*
StickerRoll::mutable_sticker() {
  // @@protoc_insertion_point(field_mutable_list:instantmotiontracking.StickerRoll.sticker)
  return &sticker_;
}
inline const ::instantmotiontracking::Sticker& StickerRoll::_internal_sticker(int index) const {
  return sticker_.Get(index);
}
inline const ::instantmotiontracking::Sticker& StickerRoll::sticker(int index) const {
  // @@protoc_insertion_point(field_get:instantmotiontracking.StickerRoll.sticker)
  return _internal_sticker(index);
}
inline ::instantmotiontracking::Sticker* StickerRoll::_internal_add_sticker() {
  return sticker_.Add();
}
inline ::instantmotiontracking::Sticker* StickerRoll::add_sticker() {
  // @@protoc_insertion_point(field_add:instantmotiontracking.StickerRoll.sticker)
  return _internal_add_sticker();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instantmotiontracking::Sticker >&
StickerRoll::sticker() const {
  // @@protoc_insertion_point(field_list:instantmotiontracking.StickerRoll.sticker)
  return sticker_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instantmotiontracking

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sticker_5fbuffer_2eproto
